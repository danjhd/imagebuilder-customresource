AWSTemplateFormatVersion: 2010-09-09

Description: Creates resources to automate the deployment of Custom Resources to lookup Image Builder distributed AMIs cross accounts and regions.

Transform: AWS::Serverless-2016-10-31

Parameters:

  DistributionArns:
    Type: CommaDelimitedList
    Description: A comma-delimited list of the Arn(s) of the Image Builder Distribution(s) to be tracked.

Resources:

  StackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      StackSetName: CustomResouceAmiLookup
      Description: Automation to retrieve ImageBuilder AMIs in a CloudFormation Custom Resource in all deployed regions and accounts.
      PermissionModel: SELF_MANAGED
      Capabilities:
        - CAPABILITY_NAMED_IAM
      TemplateBody: |
        AWSTemplateFormatVersion: 2010-09-09
        Resources:
          AmiLookupFunctionRole:
            Type: AWS::IAM::Role
            Properties:
              Description: A role to allow the AmiLookupFunction to assume a cross account role.
              AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                      Service: lambda.amazonaws.com
                    Action: sts:AssumeRole
              ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
              Policies:
                - PolicyName: AssumeRole
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action:
                          - sts:AssumeRole
                        Resource: 'arn:aws:iam::*:role/EC2ImageBuilderDistributionCrossAccountRole'
          AmiLookupFunction:
            Type: AWS::Lambda::Function
            Properties:
              FunctionName: CustomResourceAmiLookup
              Description: A function to be used as a CFn Custom Resource to return the latest AMI based upon Tags.
              Architectures:
                - arm64
              Runtime: python3.8
              Handler: index.lambda_handler
              MemorySize: 128
              Timeout: 30
              Role: !GetAtt AmiLookupFunctionRole.Arn
              Environment:
                Variables:
                  IAM_ROLE_NAME: EC2ImageBuilderDistributionCrossAccountRole
              Code:
                ZipFile: |
                  import os
                  import json
                  import boto3
                  import urllib3
                  from botocore.exceptions import ClientError
                  def lambda_handler(event, context):
                      print(json.dumps(event))
                      try:
                          response = {}
                          if event['RequestType'] in ['Create','Update']:
                              account_id = event['StackId'].split(':')[4]
                              filters = [{'Name': f"tag:{t['Key']}", 'Values': [t['Value']]} for t in event['ResourceProperties']['Tags']]
                              sts = boto3.client('sts', region_name = os.environ['AWS_REGION'])
                              assume_role = sts.assume_role(
                                  RoleArn = f"arn:aws:iam::{account_id}:role/{os.environ['IAM_ROLE_NAME']}",
                                  RoleSessionName = 'RemoteAdminSession',
                                  DurationSeconds = 900
                              )
                              ec2 = boto3.client(
                                  'ec2',
                                  aws_access_key_id = assume_role['Credentials']['AccessKeyId'],
                                  aws_secret_access_key = assume_role['Credentials']['SecretAccessKey'],
                                  aws_session_token = assume_role['Credentials']['SessionToken']
                              )
                              describe_images = ec2.describe_images(
                                  Filters = filters,
                                  Owners = [account_id]
                              )
                              if len(describe_images['Images']) != 0:
                                  sorted_list = sorted(describe_images['Images'], key=lambda k: k['CreationDate'])
                                  response = sorted_list[-1]
                              print(response)
                              cfnresponse(event, context, 'SUCCESS', response, 'AmiLookup')
                          elif event['RequestType'] == 'Delete':
                              cfnresponse(event, context, 'SUCCESS', None, 'AmiLookup')
                      except Exception as ex:
                          cfnresponse(event, context, 'FAILED', None, 'AmiLookup')
                          raise
                  def cfnresponse(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
                      responseUrl = event['ResponseURL']
                      print(responseUrl)
                      responseBody = {}
                      responseBody['Status'] = responseStatus
                      responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
                      responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
                      responseBody['StackId'] = event['StackId']
                      responseBody['RequestId'] = event['RequestId']
                      responseBody['LogicalResourceId'] = event['LogicalResourceId']
                      responseBody['NoEcho'] = noEcho
                      responseBody['Data'] = responseData
                      json_responseBody = json.dumps(responseBody)
                      print(f'Response body:\n{json_responseBody}')
                      headers = {
                          'content-type' : '',
                          'content-length' : str(len(json_responseBody))
                      }
                      try:
                          http = urllib3.PoolManager()
                          response = http.request('PUT', responseUrl, body=json_responseBody, headers=headers)
                          print(f'Status code: {str(response.status)}')
                      except Exception as e:
                          print(f'send(..) failed executing requests.put(..): {str(e)}')

  AutomationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A function to automate the deployment of Lambda functions and Lambda Permissions based upon an Image Builder Distribution being updated.
      Architectures:
        - arm64
      Runtime: python3.8
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 300
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cloudformation:DeleteStackInstances
                - cloudformation:ListStackInstances
                - cloudformation:DescribeStackSetOperation
                - cloudformation:CreateStackInstances
              Resource: '*'
            - Effect: Allow
              Action:
                - lambda:GetPolicy
                - lambda:AddPermission
                - lambda:RemovePermission
              Resource: !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:CustomResourceAmiLookup'
      Environment:
        Variables:
          STACKSET_ID: !Ref StackSet
          DISTRIBUTION_ARNS: !Join [',', !Ref DistributionArns]
      Events:
        CloudTrailEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.imagebuilder
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventSource:
                  - imagebuilder.amazonaws.com
                eventName:
                  - UpdateDistributionConfiguration
      InlineCode: |
        import os
        import json
        import boto3
        import time

        cfn = boto3.client('cloudformation')

        def lambda_handler(event, context):
            print(json.dumps(event))
            # Check if Distribution Configuration Arn matches the one being monitored.
            if event['detail']['requestParameters']['distributionConfigurationArn'] not in os.environ['DISTRIBUTION_ARNS'].split(','):
                print('This event is not for the configured Distribution Configuration therefore no action taken.')
                return
            distributions = event['detail']['requestParameters']['distributions']
            # Update the StackSet with any changes in the Regions targetted by the Distribution
            stackset_result = UpdateStackSet(os.environ['STACKSET_ID'], event['account'], [d['region'] for d in distributions])
            if stackset_result:
                # Loop each region in the Distribution and update the permissions on the Lambda function to match the targetted accounts.
                for dist in distributions:
                    UpdateLambdaAccountPermissions('CustomResourceAmiLookup', dist['region'], dist['amiDistributionConfiguration']['targetAccountIds'])

        def UpdateStackSet(stackset_id, account_id, regions):
            list_stack_instances = cfn.list_stack_instances(
                StackSetName = stackset_id,
                StackInstanceAccount = account_id
            )
            # Get the list of regions currently deployed to
            current_regions = [s['Region'] for s in list_stack_instances['Summaries']]
            del_regions = list(set(current_regions) - set(regions))
            del_result = 'SUCCEEDED'
            # Delete regions from StackSet if required
            if len(del_regions) != 0:
                print('Deleting regions:', del_regions)
                del_result = OperationWaiter(stackset_id, DeleteRegions(stackset_id, account_id, del_regions))

            add_regions = list(set(regions) - set(current_regions))
            add_result = 'SUCCEEDED'
            # Add regions to StackSet if required
            if len(add_regions) != 0:
                print('Adding regions:', add_regions)
                add_result = OperationWaiter(stackset_id, AddRegions(stackset_id, account_id, add_regions))
            return (del_result == 'SUCCEEDED') and (add_result == 'SUCCEEDED')

        def DeleteRegions(stackset_id, account_id, regions):
            stack_instances = cfn.delete_stack_instances(
                StackSetName = stackset_id,
                Accounts = [account_id],
                Regions = regions,
                OperationPreferences = {
                    'RegionConcurrencyType': 'PARALLEL',
                    'FailureToleranceCount': 0,
                    'MaxConcurrentPercentage': 100
                },
                RetainStacks = False
            )
            return stack_instances['OperationId']

        def AddRegions(stackset_id, account_id, regions):
            stack_instances = cfn.create_stack_instances(
                StackSetName = stackset_id,
                Accounts = [account_id],
                Regions = regions,
                OperationPreferences={
                    'RegionConcurrencyType': 'PARALLEL',
                    'FailureToleranceCount': 0,
                    'MaxConcurrentPercentage': 100
                }
            )
            return stack_instances['OperationId']

        def OperationWaiter(stackset_id, operation_id):
            # Wait for StackSet operations to complete.
            time.sleep(10)
            operation = cfn.describe_stack_set_operation(StackSetName = stackset_id, OperationId = operation_id)
            while operation['StackSetOperation']['Status'] in ['RUNNING', 'STOPPING', 'QUEUED']:
                time.sleep(10)
                operation = cfn.describe_stack_set_operation(StackSetName = stackset_id, OperationId = operation_id)
            return operation['StackSetOperation']['Status']

        def UpdateLambdaAccountPermissions(function_name, region, accounts):
            lam = boto3.client('lambda', region_name = region)
            # Get the list of accounts that already have permissions
            current_accounts = GetLambdaAccountPermissions(lam, function_name)
            del_accounts = list(set(current_accounts) - set(accounts))
            # Delete account permission if required
            if len(del_accounts) != 0:
                print('Deleting account permissions:', del_accounts, region)
                DeleteLambdaAccountPermissions(lam, function_name, del_accounts)
            add_accounts = list(set(accounts) - set(current_accounts))
            # Add accoutn permissions if required
            if len(add_accounts) != 0:
                print('Adding account permissions:', add_accounts, region)
                AddLambdaAccountPermissions(lam, function_name, add_accounts)

        def GetLambdaAccountPermissions(lam, function_name):
            try:
                get_policy = lam.get_policy(FunctionName = function_name)
                policy = json.loads(get_policy['Policy'])
                accounts = [s['Principal']['AWS'].split(':')[4] for s in policy['Statement'] if 'AWS' in s['Principal'] and s['Principal']['AWS'].startswith('arn:aws:iam::') and s['Principal']['AWS'].endswith(':root')]
                return accounts
            except Exception as e:
                if e.response['Error']['Code'] == 'ResourceNotFoundException':
                    return []
                else:
                    raise e

        def DeleteLambdaAccountPermissions(lam, function_name, accounts):
            for account in accounts:
                remove_permission = lam.remove_permission(
                    FunctionName = function_name,
                    StatementId = account
                )
                print(account, remove_permission)

        def AddLambdaAccountPermissions(lam, function_name, accounts):
            for account in accounts:
                add_permission = lam.add_permission(
                    FunctionName = function_name,
                    StatementId = account,
                    Action = 'lambda:InvokeFunction',
                    Principal = account
                )
                print(add_permission['Statement'])
